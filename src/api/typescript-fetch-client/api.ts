/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Vehicle Booking API by e.GO Digital 
 * Describes all backend endpoints.
 *
 * OpenAPI spec version: 2.0.5
 * Contact: hello@e-go-digital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://ego-vehicle-api.azurewebsites.net".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CancelVehicleBookingResponse
 */
export interface CancelVehicleBookingResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof CancelVehicleBookingResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleBookingItem}
     * @memberof CancelVehicleBookingResponse
     */
    data?: VehicleBookingItem;
}

/**
 * 
 * @export
 * @interface CreateTeamRequest
 */
export interface CreateTeamRequest {
    /**
     * The name of the new team.
     * @type {string}
     * @memberof CreateTeamRequest
     */
    name: string;
}

/**
 * 
 * @export
 * @interface CreateTeamResponse
 */
export interface CreateTeamResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof CreateTeamResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {TeamItemWithApiKey}
     * @memberof CreateTeamResponse
     */
    data?: TeamItemWithApiKey;
}

/**
 * 
 * @export
 * @interface CreateVehicleBookingRequest
 */
export interface CreateVehicleBookingRequest {
    /**
     * The start date.
     * @type {string}
     * @memberof CreateVehicleBookingRequest
     */
    from: string;
    /**
     * The end date.
     * @type {string}
     * @memberof CreateVehicleBookingRequest
     */
    until: string;
}

/**
 * 
 * @export
 * @interface CreateVehicleBookingResponse
 */
export interface CreateVehicleBookingResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof CreateVehicleBookingResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleItem}
     * @memberof CreateVehicleBookingResponse
     */
    data?: VehicleItem;
}

/**
 * 
 * @export
 * @interface CreateVehicleRequest
 */
export interface CreateVehicleRequest {
    /**
     * The country (code).
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    country?: string;
    /**
     * The license plate.
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    licensePlate: string;
    /**
     * The manufacturer.
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    manufacturer: string;
    /**
     * The model.
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    model: string;
    /**
     * The name.
     * @type {string}
     * @memberof CreateVehicleRequest
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface CreateVehicleResponse
 */
export interface CreateVehicleResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof CreateVehicleResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleItem}
     * @memberof CreateVehicleResponse
     */
    data?: VehicleItem;
}

/**
 * 
 * @export
 * @interface DeleteVehicleBookingResponse
 */
export interface DeleteVehicleBookingResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof DeleteVehicleBookingResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleBookingItem}
     * @memberof DeleteVehicleBookingResponse
     */
    data?: VehicleBookingItem;
}

/**
 * 
 * @export
 * @interface DeleteVehicleResponse
 */
export interface DeleteVehicleResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof DeleteVehicleResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleItem}
     * @memberof DeleteVehicleResponse
     */
    data?: VehicleItem;
}

/**
 * 
 * @export
 * @interface EnvironmentItem
 */
export interface EnvironmentItem {
    /**
     * The ID of the environment.
     * @type {string}
     * @memberof EnvironmentItem
     */
    id: string;
    /**
     * The name of the environment.
     * @type {string}
     * @memberof EnvironmentItem
     */
    name: string;
    /**
     * The underlying team.
     * @type {TeamItem}
     * @memberof EnvironmentItem
     */
    team?: TeamItem;
}

/**
 * 
 * @export
 * @interface EnvironmentListResponse
 */
export interface EnvironmentListResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof EnvironmentListResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {Array<EnvironmentItem>}
     * @memberof EnvironmentListResponse
     */
    data?: Array<EnvironmentItem>;
}

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Indicates that operation was not successul.
     * @type {boolean}
     * @memberof ErrorResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {string}
     * @memberof ErrorResponse
     */
    data?: string;
}

/**
 * 
 * @export
 * @interface FinishVehicleBookingResponse
 */
export interface FinishVehicleBookingResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof FinishVehicleBookingResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleBookingItem}
     * @memberof FinishVehicleBookingResponse
     */
    data?: VehicleBookingItem;
}

/**
 * 
 * @export
 * @interface GeneralInfoResponse
 */
export interface GeneralInfoResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof GeneralInfoResponse
     */
    success: boolean;
    /**
     * 
     * @type {GeneralInfoResponseData}
     * @memberof GeneralInfoResponse
     */
    data?: GeneralInfoResponseData;
}

/**
 * The data, if successful.
 * @export
 * @interface GeneralInfoResponseData
 */
export interface GeneralInfoResponseData {
    /**
     * 
     * @type {GeneralInfoResponseDataMe}
     * @memberof GeneralInfoResponseData
     */
    me?: GeneralInfoResponseDataMe;
    /**
     * The server's timestamp, in UTC.
     * @type {string}
     * @memberof GeneralInfoResponseData
     */
    now?: string;
    /**
     * The current team.
     * @type {TeamItem}
     * @memberof GeneralInfoResponseData
     */
    team?: TeamItem;
}

/**
 * Information about the requesting client.
 * @export
 * @interface GeneralInfoResponseDataMe
 */
export interface GeneralInfoResponseDataMe {
    /**
     * The IP of the requresting client.
     * @type {string}
     * @memberof GeneralInfoResponseDataMe
     */
    ip?: string;
    /**
     * The TCP port of the requresting client.
     * @type {number}
     * @memberof GeneralInfoResponseDataMe
     */
    port?: number;
}

/**
 * 
 * @export
 * @interface GetVehicleResponse
 */
export interface GetVehicleResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof GetVehicleResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleItem}
     * @memberof GetVehicleResponse
     */
    data?: VehicleItem;
}

/**
 * 
 * @export
 * @interface ListTeamsResponse
 */
export interface ListTeamsResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof ListTeamsResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {Array<TeamItemWithApiKey>}
     * @memberof ListTeamsResponse
     */
    data?: Array<TeamItemWithApiKey>;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum OnOffStatus {
    Off = <any> 'off',
    On = <any> 'on'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum OpenStatus {
    Closed = <any> 'closed',
    Open = <any> 'open'
}

/**
 * 
 * @export
 * @interface StartVehicleBookingResponse
 */
export interface StartVehicleBookingResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof StartVehicleBookingResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleBookingItem}
     * @memberof StartVehicleBookingResponse
     */
    data?: VehicleBookingItem;
}

/**
 * 
 * @export
 * @interface TeamItem
 */
export interface TeamItem {
    /**
     * The ID of the team.
     * @type {string}
     * @memberof TeamItem
     */
    id: string;
    /**
     * The name of the team.
     * @type {string}
     * @memberof TeamItem
     */
    name: string;
}

/**
 * 
 * @export
 * @interface TeamItemWithApiKey
 */
export interface TeamItemWithApiKey {
    /**
     * The API key of the team.
     * @type {string}
     * @memberof TeamItemWithApiKey
     */
    apiKey: string;
    /**
     * The ID of the team.
     * @type {string}
     * @memberof TeamItemWithApiKey
     */
    id: string;
    /**
     * The name of the team.
     * @type {string}
     * @memberof TeamItemWithApiKey
     */
    name: string;
}

/**
 * 
 * @export
 * @interface UpdateVehicleRequest
 */
export interface UpdateVehicleRequest {
    /**
     * The new name.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    name?: string;
    /**
     * The new status.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    status?: UpdateVehicleRequest.StatusEnum;
}

// /**
//  * @export
//  * @namespace UpdateVehicleRequest
//  */
// declareee namespace UpdateVehicleRequest {
//     /**
//      * @export
//      * @enum {string}
//      */
//     export enum StatusEnum {
//         Available = <any> 'available',
//         Blocked = <any> 'blocked',
//         Charging = <any> 'charging'
//     }
// }

/**
 * 
 * @export
 * @interface UpdateVehicleResponse
 */
export interface UpdateVehicleResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof UpdateVehicleResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {VehicleItem}
     * @memberof UpdateVehicleResponse
     */
    data?: VehicleItem;
}

/**
 * 
 * @export
 * @interface VehicleBookingItem
 */
export interface VehicleBookingItem {
    /**
     * The event type of the vehicle booking.
     * @type {string}
     * @memberof VehicleBookingItem
     */
    event: VehicleBookingItem.EventEnum;
    /**
     * The timestamp when the vehicle booking starts.
     * @type {string}
     * @memberof VehicleBookingItem
     */
    from?: string;
    /**
     * The ID of the vehicle booking.
     * @type {string}
     * @memberof VehicleBookingItem
     */
    id: string;
    /**
     * The status of the vehicle booking.
     * @type {string}
     * @memberof VehicleBookingItem
     */
    status: VehicleBookingItem.StatusEnum;
    /**
     * The timestamp of the vehicle booking.
     * @type {string}
     * @memberof VehicleBookingItem
     */
    time: string;
    /**
     * The timestamp when the vehicle booking ends.
     * @type {string}
     * @memberof VehicleBookingItem
     */
    until?: string;
    /**
     * The underlying vehicle.
     * @type {VehicleItem}
     * @memberof VehicleBookingItem
     */
    vehicle: VehicleItem;
}

/**
 * @export
 * @namespace VehicleBookingItem
 */
export namespace VehicleBookingItem {
    /**
     * @export
     * @enum {string}
     */
    export enum EventEnum {
        Cancelled = <any> 'cancelled',
        Created = <any> 'created',
        FinishedInTime = <any> 'finished_in_time',
        FinishedLate = <any> 'finished_late',
        Started = <any> 'started'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Cancelled = <any> 'cancelled',
        Finished = <any> 'finished',
        New = <any> 'new'
    }
}

/**
 * 
 * @export
 * @interface VehicleBookingListResponse
 */
export interface VehicleBookingListResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof VehicleBookingListResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {Array<VehicleBookingItem>}
     * @memberof VehicleBookingListResponse
     */
    data?: Array<VehicleBookingItem>;
}

/**
 * 
 * @export
 * @interface VehicleEventItem
 */
export interface VehicleEventItem {
    /**
     * The creation time.
     * @type {string}
     * @memberof VehicleEventItem
     */
    creationTime: string;
    /**
     * Event data.
     * @type {any}
     * @memberof VehicleEventItem
     */
    data?: any;
    /**
     * The ID of the event.
     * @type {string}
     * @memberof VehicleEventItem
     */
    id: string;
    /**
     * Indicates if the event has been handled or not.
     * @type {boolean}
     * @memberof VehicleEventItem
     */
    isHandled: boolean;
    /**
     * The last update timestamp.
     * @type {string}
     * @memberof VehicleEventItem
     */
    lastUpdate?: string;
    /**
     * The name of the event.
     * @type {string}
     * @memberof VehicleEventItem
     */
    name?: string;
    /**
     * The underlying vehicle.
     * @type {VehicleItem}
     * @memberof VehicleEventItem
     */
    vehicle: VehicleItem;
}

/**
 * 
 * @export
 * @interface VehicleEventListResponse
 */
export interface VehicleEventListResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof VehicleEventListResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {Array<VehicleEventItem>}
     * @memberof VehicleEventListResponse
     */
    data?: Array<VehicleEventItem>;
}

/**
 * 
 * @export
 * @interface VehicleItem
 */
export interface VehicleItem {
    /**
     * The country.
     * @type {string}
     * @memberof VehicleItem
     */
    country: string;
    /**
     * The underlying environment.
     * @type {EnvironmentItem}
     * @memberof VehicleItem
     */
    environment?: EnvironmentItem;
    /**
     * The ID of the vehicle.
     * @type {string}
     * @memberof VehicleItem
     */
    id: string;
    /**
     * The license plate.
     * @type {string}
     * @memberof VehicleItem
     */
    licensePlate: string;
    /**
     * The name of the manufacturer.
     * @type {string}
     * @memberof VehicleItem
     */
    manufacturer: string;
    /**
     * The name of the model.
     * @type {string}
     * @memberof VehicleItem
     */
    model: string;
    /**
     * The current status.
     * @type {string}
     * @memberof VehicleItem
     */
    status?: VehicleItem.StatusEnum;
    /**
     * The underlying team.
     * @type {TeamItem}
     * @memberof VehicleItem
     */
    team?: TeamItem;
}

/**
 * @export
 * @namespace VehicleItem
 */
export namespace VehicleItem {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Available = <any> 'available',
        Blocked = <any> 'blocked',
        Charging = <any> 'charging'
    }
}

/**
 * 
 * @export
 * @interface VehicleListResponse
 */
export interface VehicleListResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof VehicleListResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {Array<VehicleItem>}
     * @memberof VehicleListResponse
     */
    data?: Array<VehicleItem>;
}

/**
 * 
 * @export
 * @interface VehicleSignalItem
 */
export interface VehicleSignalItem {
    /**
     * The creation time.
     * @type {string}
     * @memberof VehicleSignalItem
     */
    creationTime: string;
    /**
     * The signal data.
     * @type {any}
     * @memberof VehicleSignalItem
     */
    data?: any;
    /**
     * The ID of the signal.
     * @type {string}
     * @memberof VehicleSignalItem
     */
    id: string;
    /**
     * The last update timestamp.
     * @type {string}
     * @memberof VehicleSignalItem
     */
    lastUpdate?: string;
    /**
     * The name of the signal.
     * @type {string}
     * @memberof VehicleSignalItem
     */
    name?: string;
    /**
     * The underlying vehicle.
     * @type {VehicleItem}
     * @memberof VehicleSignalItem
     */
    vehicle: VehicleItem;
}

/**
 * 
 * @export
 * @interface VehicleSignalListForPatchExample
 */
export interface VehicleSignalListForPatchExample {
    /**
     * 
     * @type {string}
     * @memberof VehicleSignalListForPatchExample
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleSignalListForPatchExample
     */
    turnSignalLeft?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleSignalListForPatchExample
     */
    turnSignalRight?: string;
}

/**
 * 
 * @export
 * @interface VehicleSignalListResponse
 */
export interface VehicleSignalListResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof VehicleSignalListResponse
     */
    success: boolean;
    /**
     * 
     * @type {VehicleSignalListResponseData}
     * @memberof VehicleSignalListResponse
     */
    data?: VehicleSignalListResponseData;
}

/**
 * The data, if successful.
 * @export
 * @interface VehicleSignalListResponseData
 */
export interface VehicleSignalListResponseData {
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    brakeFluidLevel?: number;
    /**
     * 
     * @type {YesOrNo}
     * @memberof VehicleSignalListResponseData
     */
    batteryCharging?: YesOrNo;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    batteryChargingCurrent?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    batteryHealth?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    batteryLoadingCapacity?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    batteryStateOfCharge?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    calculatedRemainingDistance?: number;
    /**
     * 
     * @type {OpenStatus}
     * @memberof VehicleSignalListResponseData
     */
    centralLockingSystem?: OpenStatus;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    distanceToObjectBack?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    distanceToObjectBottom?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    distanceToObjectFront?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    distanceToObjectLeft?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    distanceToObjectRight?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    distanceTrip?: number;
    /**
     * 
     * @type {OpenStatus}
     * @memberof VehicleSignalListResponseData
     */
    doorDiscFrontLeft?: OpenStatus;
    /**
     * 
     * @type {OpenStatus}
     * @memberof VehicleSignalListResponseData
     */
    doorDiscFrontRight?: OpenStatus;
    /**
     * 
     * @type {OpenStatus}
     * @memberof VehicleSignalListResponseData
     */
    doorFrontLeft?: OpenStatus;
    /**
     * 
     * @type {OpenStatus}
     * @memberof VehicleSignalListResponseData
     */
    doorFrontRight?: OpenStatus;
    /**
     * 
     * @type {string}
     * @memberof VehicleSignalListResponseData
     */
    driveMode?: VehicleSignalListResponseData.DriveModeEnum;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    flash?: OnOffStatus;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    heatedSeats?: OnOffStatus;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    highBeam?: OnOffStatus;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    infotainment?: OnOffStatus;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    infotainmentVolume?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleSignalListResponseData
     */
    location?: string;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    mileage?: number;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    motorControlLamp?: OnOffStatus;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    personCount?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    pulseSensorSteeringWheel?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    powerConsumption?: number;
    /**
     * 
     * @type {string}
     * @memberof VehicleSignalListResponseData
     */
    rainSensor?: VehicleSignalListResponseData.RainSensorEnum;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    rearRunningLights?: OnOffStatus;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    sideLights?: OnOffStatus;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    speed?: number;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    stopLights?: OnOffStatus;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    temperatureInside?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    temperatureOutside?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    tirePressureBackLeft?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    tirePressureBackRight?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    tirePressureFrontLeft?: number;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    tirePressureFrontRight?: number;
    /**
     * 
     * @type {OpenStatus}
     * @memberof VehicleSignalListResponseData
     */
    trunk?: OpenStatus;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    turnSignalLeft?: OnOffStatus;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    turnSignalRight?: OnOffStatus;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    warningBlinker?: OnOffStatus;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    weight?: number;
    /**
     * 
     * @type {OnOffStatus}
     * @memberof VehicleSignalListResponseData
     */
    windshieldWipers?: OnOffStatus;
    /**
     * 
     * @type {number}
     * @memberof VehicleSignalListResponseData
     */
    wipingWaterLevel?: number;
}

/**
 * @export
 * @namespace VehicleSignalListResponseData
 */
export namespace VehicleSignalListResponseData {
    /**
     * @export
     * @enum {string}
     */
    export enum DriveModeEnum {
        Comfort = <any> 'comfort',
        Eco = <any> 'eco',
        Sport = <any> 'sport'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum RainSensorEnum {
        NoRain = <any> 'no_rain',
        Rain = <any> 'rain'
    }
}

/**
 * 
 * @export
 * @interface VehicleSignalLogItem
 */
export interface VehicleSignalLogItem {
    /**
     * The ID of the signal.
     * @type {string}
     * @memberof VehicleSignalLogItem
     */
    id: string;
    /**
     * The name of the signal.
     * @type {string}
     * @memberof VehicleSignalLogItem
     */
    name: string;
    /**
     * The new data.
     * @type {any}
     * @memberof VehicleSignalLogItem
     */
    newData?: any;
    /**
     * The new data.
     * @type {any}
     * @memberof VehicleSignalLogItem
     */
    oldData?: any;
    /**
     * The underlying signal.
     * @type {VehicleSignalItem}
     * @memberof VehicleSignalLogItem
     */
    signal: VehicleSignalItem;
    /**
     * The underlying vehicle.
     * @type {VehicleItem}
     * @memberof VehicleSignalLogItem
     */
    vehicle: VehicleItem;
}

/**
 * 
 * @export
 * @interface VehicleSignalLogListResponse
 */
export interface VehicleSignalLogListResponse {
    /**
     * Indicates if operation was successful or not.
     * @type {boolean}
     * @memberof VehicleSignalLogListResponse
     */
    success: boolean;
    /**
     * The data, if successful.
     * @type {Array<VehicleSignalLogItem>}
     * @memberof VehicleSignalLogListResponse
     */
    data?: Array<VehicleSignalLogItem>;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum YesOrNo {
    No = <any> 'no',
    Yes = <any> 'yes'
}


/**
 * AdminApi - fetch parameter creator
 * @export
 */
export const AdminApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Lists all teams.
         * @param {string} token The admin API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminTeamsGet(token: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling adminTeamsGet.');
            }
            const localVarPath = `/admin/teams`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['Token'] = String(token);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new team.
         * @param {CreateTeamRequest} body Options for a request.
         * @param {string} token The admin API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminTeamsPost(body: CreateTeamRequest, token: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminTeamsPost.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling adminTeamsPost.');
            }
            const localVarPath = `/admin/teams`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['Token'] = String(token);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateTeamRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Lists all teams.
         * @param {string} token The admin API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminTeamsGet(token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListTeamsResponse> {
            const localVarFetchArgs = AdminApiFetchParamCreator(configuration).adminTeamsGet(token, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a new team.
         * @param {CreateTeamRequest} body Options for a request.
         * @param {string} token The admin API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminTeamsPost(body: CreateTeamRequest, token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateTeamResponse> {
            const localVarFetchArgs = AdminApiFetchParamCreator(configuration).adminTeamsPost(body, token, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Lists all teams.
         * @param {string} token The admin API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminTeamsGet(token: string, options?: any) {
            return AdminApiFp(configuration).adminTeamsGet(token, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a new team.
         * @param {CreateTeamRequest} body Options for a request.
         * @param {string} token The admin API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminTeamsPost(body: CreateTeamRequest, token: string, options?: any) {
            return AdminApiFp(configuration).adminTeamsPost(body, token, options)(fetch, basePath);
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary Lists all teams.
     * @param {string} token The admin API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminTeamsGet(token: string, options?: any) {
        return AdminApiFp(this.configuration).adminTeamsGet(token, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a new team.
     * @param {CreateTeamRequest} body Options for a request.
     * @param {string} token The admin API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminTeamsPost(body: CreateTeamRequest, token: string, options?: any) {
        return AdminApiFp(this.configuration).adminTeamsPost(body, token, options)(this.fetch, this.basePath);
    }

}

/**
 * BookingsApi - fetch parameter creator
 * @export
 */
export const BookingsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancels a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdCancelPatch(xApiKey: string, bookingId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2BookingsBookingIdCancelPatch.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling apiV2BookingsBookingIdCancelPatch.');
            }
            const localVarPath = `/api/v2/bookings/{booking_id}/cancel`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a vehicle booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdDelete(xApiKey: string, bookingId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2BookingsBookingIdDelete.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling apiV2BookingsBookingIdDelete.');
            }
            const localVarPath = `/api/v2/bookings/{booking_id}`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finishes a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdFinishPatch(xApiKey: string, bookingId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2BookingsBookingIdFinishPatch.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling apiV2BookingsBookingIdFinishPatch.');
            }
            const localVarPath = `/api/v2/bookings/{booking_id}/finish`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Starts a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdStartPatch(xApiKey: string, bookingId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2BookingsBookingIdStartPatch.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling apiV2BookingsBookingIdStartPatch.');
            }
            const localVarPath = `/api/v2/bookings/{booking_id}/start`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all vehicle bookings.
         * @param {string} xApiKey The API key.
         * @param {string} [from] The filter for start date (UTC).
         * @param {string} [until] The filter for end date (UTC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsGet(xApiKey: string, from?: string, until?: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2BookingsGet.');
            }
            const localVarPath = `/api/v2/bookings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingsApi - functional programming interface
 * @export
 */
export const BookingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancels a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdCancelPatch(xApiKey: string, bookingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CancelVehicleBookingResponse> {
            const localVarFetchArgs = BookingsApiFetchParamCreator(configuration).apiV2BookingsBookingIdCancelPatch(xApiKey, bookingId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a vehicle booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdDelete(xApiKey: string, bookingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DeleteVehicleBookingResponse> {
            const localVarFetchArgs = BookingsApiFetchParamCreator(configuration).apiV2BookingsBookingIdDelete(xApiKey, bookingId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Finishes a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdFinishPatch(xApiKey: string, bookingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FinishVehicleBookingResponse> {
            const localVarFetchArgs = BookingsApiFetchParamCreator(configuration).apiV2BookingsBookingIdFinishPatch(xApiKey, bookingId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Starts a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdStartPatch(xApiKey: string, bookingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StartVehicleBookingResponse> {
            const localVarFetchArgs = BookingsApiFetchParamCreator(configuration).apiV2BookingsBookingIdStartPatch(xApiKey, bookingId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns all vehicle bookings.
         * @param {string} xApiKey The API key.
         * @param {string} [from] The filter for start date (UTC).
         * @param {string} [until] The filter for end date (UTC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsGet(xApiKey: string, from?: string, until?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleBookingListResponse> {
            const localVarFetchArgs = BookingsApiFetchParamCreator(configuration).apiV2BookingsGet(xApiKey, from, until, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BookingsApi - factory interface
 * @export
 */
export const BookingsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Cancels a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdCancelPatch(xApiKey: string, bookingId: string, options?: any) {
            return BookingsApiFp(configuration).apiV2BookingsBookingIdCancelPatch(xApiKey, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a vehicle booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdDelete(xApiKey: string, bookingId: string, options?: any) {
            return BookingsApiFp(configuration).apiV2BookingsBookingIdDelete(xApiKey, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Finishes a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdFinishPatch(xApiKey: string, bookingId: string, options?: any) {
            return BookingsApiFp(configuration).apiV2BookingsBookingIdFinishPatch(xApiKey, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Starts a booking.
         * @param {string} xApiKey The API key.
         * @param {string} bookingId The ID of the booking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsBookingIdStartPatch(xApiKey: string, bookingId: string, options?: any) {
            return BookingsApiFp(configuration).apiV2BookingsBookingIdStartPatch(xApiKey, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns all vehicle bookings.
         * @param {string} xApiKey The API key.
         * @param {string} [from] The filter for start date (UTC).
         * @param {string} [until] The filter for end date (UTC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2BookingsGet(xApiKey: string, from?: string, until?: string, options?: any) {
            return BookingsApiFp(configuration).apiV2BookingsGet(xApiKey, from, until, options)(fetch, basePath);
        },
    };
};

/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
export class BookingsApi extends BaseAPI {
    /**
     * 
     * @summary Cancels a booking.
     * @param {string} xApiKey The API key.
     * @param {string} bookingId The ID of the booking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV2BookingsBookingIdCancelPatch(xApiKey: string, bookingId: string, options?: any) {
        return BookingsApiFp(this.configuration).apiV2BookingsBookingIdCancelPatch(xApiKey, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a vehicle booking.
     * @param {string} xApiKey The API key.
     * @param {string} bookingId The ID of the booking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV2BookingsBookingIdDelete(xApiKey: string, bookingId: string, options?: any) {
        return BookingsApiFp(this.configuration).apiV2BookingsBookingIdDelete(xApiKey, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Finishes a booking.
     * @param {string} xApiKey The API key.
     * @param {string} bookingId The ID of the booking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV2BookingsBookingIdFinishPatch(xApiKey: string, bookingId: string, options?: any) {
        return BookingsApiFp(this.configuration).apiV2BookingsBookingIdFinishPatch(xApiKey, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Starts a booking.
     * @param {string} xApiKey The API key.
     * @param {string} bookingId The ID of the booking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV2BookingsBookingIdStartPatch(xApiKey: string, bookingId: string, options?: any) {
        return BookingsApiFp(this.configuration).apiV2BookingsBookingIdStartPatch(xApiKey, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns all vehicle bookings.
     * @param {string} xApiKey The API key.
     * @param {string} [from] The filter for start date (UTC).
     * @param {string} [until] The filter for end date (UTC).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV2BookingsGet(xApiKey: string, from?: string, until?: string, options?: any) {
        return BookingsApiFp(this.configuration).apiV2BookingsGet(xApiKey, from, until, options)(this.fetch, this.basePath);
    }

}

/**
 * DefaultsApi - fetch parameter creator
 * @export
 */
export const DefaultsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Resets the data of the current team.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Delete(xApiKey: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2Delete.');
            }
            const localVarPath = `/api/v2`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns general information.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Get(xApiKey: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2Get.');
            }
            const localVarPath = `/api/v2`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultsApi - functional programming interface
 * @export
 */
export const DefaultsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Resets the data of the current team.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Delete(xApiKey: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultsApiFetchParamCreator(configuration).apiV2Delete(xApiKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns general information.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Get(xApiKey: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GeneralInfoResponse> {
            const localVarFetchArgs = DefaultsApiFetchParamCreator(configuration).apiV2Get(xApiKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultsApi - factory interface
 * @export
 */
export const DefaultsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Resets the data of the current team.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Delete(xApiKey: string, options?: any) {
            return DefaultsApiFp(configuration).apiV2Delete(xApiKey, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns general information.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Get(xApiKey: string, options?: any) {
            return DefaultsApiFp(configuration).apiV2Get(xApiKey, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultsApi - object-oriented interface
 * @export
 * @class DefaultsApi
 * @extends {BaseAPI}
 */
export class DefaultsApi extends BaseAPI {
    /**
     * 
     * @summary Resets the data of the current team.
     * @param {string} xApiKey The API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultsApi
     */
    public apiV2Delete(xApiKey: string, options?: any) {
        return DefaultsApiFp(this.configuration).apiV2Delete(xApiKey, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns general information.
     * @param {string} xApiKey The API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultsApi
     */
    public apiV2Get(xApiKey: string, options?: any) {
        return DefaultsApiFp(this.configuration).apiV2Get(xApiKey, options)(this.fetch, this.basePath);
    }

}

/**
 * EnvironmentsApi - fetch parameter creator
 * @export
 */
export const EnvironmentsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of all vehicles of an environment.
         * @param {string} xApiKey The API key.
         * @param {string} environmentId The ID of the environment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2EnvironmentsEnvironmentIdVehiclesGet(xApiKey: string, environmentId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2EnvironmentsEnvironmentIdVehiclesGet.');
            }
            // verify required parameter 'environmentId' is not null or undefined
            if (environmentId === null || environmentId === undefined) {
                throw new RequiredError('environmentId','Required parameter environmentId was null or undefined when calling apiV2EnvironmentsEnvironmentIdVehiclesGet.');
            }
            const localVarPath = `/api/v2/environments/{environment_id}/vehicles`
                .replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of all environments.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2EnvironmentsGet(xApiKey: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2EnvironmentsGet.');
            }
            const localVarPath = `/api/v2/environments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export const EnvironmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of all vehicles of an environment.
         * @param {string} xApiKey The API key.
         * @param {string} environmentId The ID of the environment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2EnvironmentsEnvironmentIdVehiclesGet(xApiKey: string, environmentId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleListResponse> {
            const localVarFetchArgs = EnvironmentsApiFetchParamCreator(configuration).apiV2EnvironmentsEnvironmentIdVehiclesGet(xApiKey, environmentId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns a list of all environments.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2EnvironmentsGet(xApiKey: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EnvironmentListResponse> {
            const localVarFetchArgs = EnvironmentsApiFetchParamCreator(configuration).apiV2EnvironmentsGet(xApiKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EnvironmentsApi - factory interface
 * @export
 */
export const EnvironmentsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Returns a list of all vehicles of an environment.
         * @param {string} xApiKey The API key.
         * @param {string} environmentId The ID of the environment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2EnvironmentsEnvironmentIdVehiclesGet(xApiKey: string, environmentId: string, options?: any) {
            return EnvironmentsApiFp(configuration).apiV2EnvironmentsEnvironmentIdVehiclesGet(xApiKey, environmentId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns a list of all environments.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2EnvironmentsGet(xApiKey: string, options?: any) {
            return EnvironmentsApiFp(configuration).apiV2EnvironmentsGet(xApiKey, options)(fetch, basePath);
        },
    };
};

/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export class EnvironmentsApi extends BaseAPI {
    /**
     * 
     * @summary Returns a list of all vehicles of an environment.
     * @param {string} xApiKey The API key.
     * @param {string} environmentId The ID of the environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    public apiV2EnvironmentsEnvironmentIdVehiclesGet(xApiKey: string, environmentId: string, options?: any) {
        return EnvironmentsApiFp(this.configuration).apiV2EnvironmentsEnvironmentIdVehiclesGet(xApiKey, environmentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of all environments.
     * @param {string} xApiKey The API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    public apiV2EnvironmentsGet(xApiKey: string, options?: any) {
        return EnvironmentsApiFp(this.configuration).apiV2EnvironmentsGet(xApiKey, options)(this.fetch, this.basePath);
    }

}

/**
 * VehiclesApi - fetch parameter creator
 * @export
 */
export const VehiclesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of all vehicles.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesGet(xApiKey: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesGet.');
            }
            const localVarPath = `/api/v2/vehicles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new vehicle.
         * @param {CreateVehicleRequest} body Options for a request.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesPost(body: CreateVehicleRequest, xApiKey: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV2VehiclesPost.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesPost.');
            }
            const localVarPath = `/api/v2/vehicles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateVehicleRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of bookings of a vehicle, with optional filters.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {string} [from] The filter for start date (UTC).
         * @param {string} [status] The filter for the status.
         * @param {string} [until] The filter for end date (UTC).
         * @param {string} [vehicle] The filter for the ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdBookingsGet(xApiKey: string, vehicleId: string, from?: string, status?: string, until?: string, vehicle?: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdBookingsGet.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdBookingsGet.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/bookings`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (vehicle !== undefined) {
                localVarQueryParameter['vehicle'] = vehicle;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new booking for a vehicle.
         * @param {CreateVehicleBookingRequest} body Options for a request.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdBookingsPost(body: CreateVehicleBookingRequest, xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiV2VehiclesVehicleIdBookingsPost.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdBookingsPost.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdBookingsPost.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/bookings`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateVehicleBookingRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resets the complete vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdDelete(xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdDelete.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdDelete.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes the complete queue of events.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdEventsDelete(xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdEventsDelete.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdEventsDelete.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/events`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of unhandled events and marks them as handled.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {string} [filter] Regex filter for event name (case insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdEventsGet(xApiKey: string, vehicleId: string, filter?: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdEventsGet.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdEventsGet.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/events`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the information of the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdGet(xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdGet.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdGet.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resets the infotainment screen.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentDelete(xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentDelete.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentDelete.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/infotainment`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the current infotainment screen.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [cache] Use cache or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentGet(xApiKey: string, vehicleId: string, cache?: number, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentGet.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentGet.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/infotainment`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the data of the screen as image or video.
         * @param {string} xApiKey The API key.
         * @param {string} image The image to write / insert.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentPost(xApiKey: string, image: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentPost.');
            }
            // verify required parameter 'image' is not null or undefined
            if (image === null || image === undefined) {
                throw new RequiredError('image','Required parameter image was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentPost.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentPost.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/infotainment`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarHeaderParameter['Content-Type'] = 'image/bmp';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(image || {}) : (image || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Writes an image to the infotainment screen.
         * @param {string} image The image to write / insert.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [x] The x coorinate where to place the image.
         * @param {number} [y] The y coorinate where to place the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentPut(image: string, xApiKey: string, vehicleId: string, x?: number, y?: number, options: any = {}): FetchArgs {
            // verify required parameter 'image' is not null or undefined
            if (image === null || image === undefined) {
                throw new RequiredError('image','Required parameter image was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentPut.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentPut.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentPut.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/infotainment`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(image || {}) : (image || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Writes text to the infotainment system.
         * @param {string} text The text to write / insert.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [black] Indicates if to use black font color or not.
         * @param {number} [size] The font size.
         * @param {number} [x] The x coorinate where to place the text.
         * @param {number} [y] The y coorinate where to place the text.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentTextPut(text: string, xApiKey: string, vehicleId: string, black?: number, size?: number, x?: number, y?: number, options: any = {}): FetchArgs {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new RequiredError('text','Required parameter text was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentTextPut.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentTextPut.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdInfotainmentTextPut.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/infotainment/text`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (black !== undefined) {
                localVarQueryParameter['black'] = black;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(text || {}) : (text || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all vehicle signal logs.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdLogsSignalsDelete(xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdLogsSignalsDelete.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdLogsSignalsDelete.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/logs/signals`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets vehicle signal logs.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [limit] The maximum number of results.
         * @param {number} [offset] The zero based offset.
         * @param {'asc' | 'desc'} [sort] Sort order.
         * @param {string} [filter] Regex filter for signal name (case insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdLogsSignalsGet(xApiKey: string, vehicleId: string, limit?: number, offset?: number, sort?: 'asc' | 'desc', filter?: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdLogsSignalsGet.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdLogsSignalsGet.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/logs/signals`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a vehicle.
         * @param {UpdateVehicleRequest} updateVehicleOptions The data to update.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdPatch(updateVehicleOptions: UpdateVehicleRequest, xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'updateVehicleOptions' is not null or undefined
            if (updateVehicleOptions === null || updateVehicleOptions === undefined) {
                throw new RequiredError('updateVehicleOptions','Required parameter updateVehicleOptions was null or undefined when calling apiV2VehiclesVehicleIdPatch.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdPatch.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdPatch.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateVehicleRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(updateVehicleOptions || {}) : (updateVehicleOptions || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resets all signals.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsDelete(xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdSignalsDelete.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdSignalsDelete.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/signals`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of all signals.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [cache] Use cache or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsGet(xApiKey: string, vehicleId: string, cache?: number, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdSignalsGet.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdSignalsGet.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/signals`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a list of one or more vehicle signals.
         * @param {VehicleSignalListForPatchExample} listOfVehicleSignalsToUpdate A list of one or more value signals to update.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsPatch(listOfVehicleSignalsToUpdate: VehicleSignalListForPatchExample, xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'listOfVehicleSignalsToUpdate' is not null or undefined
            if (listOfVehicleSignalsToUpdate === null || listOfVehicleSignalsToUpdate === undefined) {
                throw new RequiredError('listOfVehicleSignalsToUpdate','Required parameter listOfVehicleSignalsToUpdate was null or undefined when calling apiV2VehiclesVehicleIdSignalsPatch.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdSignalsPatch.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdSignalsPatch.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/signals`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"VehicleSignalListForPatchExample" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(listOfVehicleSignalsToUpdate || {}) : (listOfVehicleSignalsToUpdate || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unsets the state value for the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStateDelete(xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdStateDelete.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdStateDelete.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/state`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the state value of the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStateGet(xApiKey: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdStateGet.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdStateGet.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/state`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets a state value for the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} newVehicleStateValue The new value.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStatePatch(xApiKey: string, newVehicleStateValue: string, vehicleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling apiV2VehiclesVehicleIdStatePatch.');
            }
            // verify required parameter 'newVehicleStateValue' is not null or undefined
            if (newVehicleStateValue === null || newVehicleStateValue === undefined) {
                throw new RequiredError('newVehicleStateValue','Required parameter newVehicleStateValue was null or undefined when calling apiV2VehiclesVehicleIdStatePatch.');
            }
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiV2VehiclesVehicleIdStatePatch.');
            }
            const localVarPath = `/api/v2/vehicles/{vehicle_id}/state`
                .replace(`{${"vehicle_id"}}`, encodeURIComponent(String(vehicleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['X-Api-Key'] = String(xApiKey);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(newVehicleStateValue || {}) : (newVehicleStateValue || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehiclesApi - functional programming interface
 * @export
 */
export const VehiclesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of all vehicles.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesGet(xApiKey: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleListResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesGet(xApiKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a new vehicle.
         * @param {CreateVehicleRequest} body Options for a request.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesPost(body: CreateVehicleRequest, xApiKey: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateVehicleResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesPost(body, xApiKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns a list of bookings of a vehicle, with optional filters.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {string} [from] The filter for start date (UTC).
         * @param {string} [status] The filter for the status.
         * @param {string} [until] The filter for end date (UTC).
         * @param {string} [vehicle] The filter for the ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdBookingsGet(xApiKey: string, vehicleId: string, from?: string, status?: string, until?: string, vehicle?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleBookingListResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdBookingsGet(xApiKey, vehicleId, from, status, until, vehicle, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a new booking for a vehicle.
         * @param {CreateVehicleBookingRequest} body Options for a request.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdBookingsPost(body: CreateVehicleBookingRequest, xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateVehicleBookingResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdBookingsPost(body, xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Resets the complete vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdDelete(xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DeleteVehicleResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdDelete(xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Removes the complete queue of events.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdEventsDelete(xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdEventsDelete(xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets a list of unhandled events and marks them as handled.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {string} [filter] Regex filter for event name (case insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdEventsGet(xApiKey: string, vehicleId: string, filter?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleEventListResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdEventsGet(xApiKey, vehicleId, filter, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the information of the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdGet(xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetVehicleResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdGet(xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Resets the infotainment screen.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentDelete(xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdInfotainmentDelete(xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the current infotainment screen.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [cache] Use cache or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentGet(xApiKey: string, vehicleId: string, cache?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdInfotainmentGet(xApiKey, vehicleId, cache, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Sets the data of the screen as image or video.
         * @param {string} xApiKey The API key.
         * @param {string} image The image to write / insert.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentPost(xApiKey: string, image: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdInfotainmentPost(xApiKey, image, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Writes an image to the infotainment screen.
         * @param {string} image The image to write / insert.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [x] The x coorinate where to place the image.
         * @param {number} [y] The y coorinate where to place the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentPut(image: string, xApiKey: string, vehicleId: string, x?: number, y?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdInfotainmentPut(image, xApiKey, vehicleId, x, y, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Writes text to the infotainment system.
         * @param {string} text The text to write / insert.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [black] Indicates if to use black font color or not.
         * @param {number} [size] The font size.
         * @param {number} [x] The x coorinate where to place the text.
         * @param {number} [y] The y coorinate where to place the text.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentTextPut(text: string, xApiKey: string, vehicleId: string, black?: number, size?: number, x?: number, y?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdInfotainmentTextPut(text, xApiKey, vehicleId, black, size, x, y, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes all vehicle signal logs.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdLogsSignalsDelete(xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdLogsSignalsDelete(xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets vehicle signal logs.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [limit] The maximum number of results.
         * @param {number} [offset] The zero based offset.
         * @param {'asc' | 'desc'} [sort] Sort order.
         * @param {string} [filter] Regex filter for signal name (case insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdLogsSignalsGet(xApiKey: string, vehicleId: string, limit?: number, offset?: number, sort?: 'asc' | 'desc', filter?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleSignalLogListResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdLogsSignalsGet(xApiKey, vehicleId, limit, offset, sort, filter, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a vehicle.
         * @param {UpdateVehicleRequest} updateVehicleOptions The data to update.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdPatch(updateVehicleOptions: UpdateVehicleRequest, xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UpdateVehicleResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdPatch(updateVehicleOptions, xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Resets all signals.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsDelete(xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleSignalListResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdSignalsDelete(xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets a list of all signals.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [cache] Use cache or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsGet(xApiKey: string, vehicleId: string, cache?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleSignalListResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdSignalsGet(xApiKey, vehicleId, cache, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a list of one or more vehicle signals.
         * @param {VehicleSignalListForPatchExample} listOfVehicleSignalsToUpdate A list of one or more value signals to update.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsPatch(listOfVehicleSignalsToUpdate: VehicleSignalListForPatchExample, xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VehicleSignalListResponse> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdSignalsPatch(listOfVehicleSignalsToUpdate, xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Unsets the state value for the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStateDelete(xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdStateDelete(xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets the state value of the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStateGet(xApiKey: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdStateGet(xApiKey, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Sets a state value for the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} newVehicleStateValue The new value.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStatePatch(xApiKey: string, newVehicleStateValue: string, vehicleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VehiclesApiFetchParamCreator(configuration).apiV2VehiclesVehicleIdStatePatch(xApiKey, newVehicleStateValue, vehicleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VehiclesApi - factory interface
 * @export
 */
export const VehiclesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Returns a list of all vehicles.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesGet(xApiKey: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesGet(xApiKey, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a new vehicle.
         * @param {CreateVehicleRequest} body Options for a request.
         * @param {string} xApiKey The API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesPost(body: CreateVehicleRequest, xApiKey: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesPost(body, xApiKey, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns a list of bookings of a vehicle, with optional filters.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {string} [from] The filter for start date (UTC).
         * @param {string} [status] The filter for the status.
         * @param {string} [until] The filter for end date (UTC).
         * @param {string} [vehicle] The filter for the ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdBookingsGet(xApiKey: string, vehicleId: string, from?: string, status?: string, until?: string, vehicle?: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdBookingsGet(xApiKey, vehicleId, from, status, until, vehicle, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a new booking for a vehicle.
         * @param {CreateVehicleBookingRequest} body Options for a request.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdBookingsPost(body: CreateVehicleBookingRequest, xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdBookingsPost(body, xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Resets the complete vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdDelete(xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdDelete(xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Removes the complete queue of events.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdEventsDelete(xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdEventsDelete(xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets a list of unhandled events and marks them as handled.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {string} [filter] Regex filter for event name (case insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdEventsGet(xApiKey: string, vehicleId: string, filter?: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdEventsGet(xApiKey, vehicleId, filter, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the information of the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdGet(xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdGet(xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Resets the infotainment screen.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentDelete(xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdInfotainmentDelete(xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the current infotainment screen.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [cache] Use cache or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentGet(xApiKey: string, vehicleId: string, cache?: number, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdInfotainmentGet(xApiKey, vehicleId, cache, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Sets the data of the screen as image or video.
         * @param {string} xApiKey The API key.
         * @param {string} image The image to write / insert.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentPost(xApiKey: string, image: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdInfotainmentPost(xApiKey, image, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Writes an image to the infotainment screen.
         * @param {string} image The image to write / insert.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [x] The x coorinate where to place the image.
         * @param {number} [y] The y coorinate where to place the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentPut(image: string, xApiKey: string, vehicleId: string, x?: number, y?: number, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdInfotainmentPut(image, xApiKey, vehicleId, x, y, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Writes text to the infotainment system.
         * @param {string} text The text to write / insert.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [black] Indicates if to use black font color or not.
         * @param {number} [size] The font size.
         * @param {number} [x] The x coorinate where to place the text.
         * @param {number} [y] The y coorinate where to place the text.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdInfotainmentTextPut(text: string, xApiKey: string, vehicleId: string, black?: number, size?: number, x?: number, y?: number, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdInfotainmentTextPut(text, xApiKey, vehicleId, black, size, x, y, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes all vehicle signal logs.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdLogsSignalsDelete(xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdLogsSignalsDelete(xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets vehicle signal logs.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [limit] The maximum number of results.
         * @param {number} [offset] The zero based offset.
         * @param {'asc' | 'desc'} [sort] Sort order.
         * @param {string} [filter] Regex filter for signal name (case insensitive).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdLogsSignalsGet(xApiKey: string, vehicleId: string, limit?: number, offset?: number, sort?: 'asc' | 'desc', filter?: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdLogsSignalsGet(xApiKey, vehicleId, limit, offset, sort, filter, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a vehicle.
         * @param {UpdateVehicleRequest} updateVehicleOptions The data to update.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdPatch(updateVehicleOptions: UpdateVehicleRequest, xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdPatch(updateVehicleOptions, xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Resets all signals.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsDelete(xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdSignalsDelete(xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets a list of all signals.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {number} [cache] Use cache or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsGet(xApiKey: string, vehicleId: string, cache?: number, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdSignalsGet(xApiKey, vehicleId, cache, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a list of one or more vehicle signals.
         * @param {VehicleSignalListForPatchExample} listOfVehicleSignalsToUpdate A list of one or more value signals to update.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdSignalsPatch(listOfVehicleSignalsToUpdate: VehicleSignalListForPatchExample, xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdSignalsPatch(listOfVehicleSignalsToUpdate, xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Unsets the state value for the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStateDelete(xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdStateDelete(xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets the state value of the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStateGet(xApiKey: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdStateGet(xApiKey, vehicleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Sets a state value for the vehicle.
         * @param {string} xApiKey The API key.
         * @param {string} newVehicleStateValue The new value.
         * @param {string} vehicleId The ID of the vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VehiclesVehicleIdStatePatch(xApiKey: string, newVehicleStateValue: string, vehicleId: string, options?: any) {
            return VehiclesApiFp(configuration).apiV2VehiclesVehicleIdStatePatch(xApiKey, newVehicleStateValue, vehicleId, options)(fetch, basePath);
        },
    };
};

/**
 * VehiclesApi - object-oriented interface
 * @export
 * @class VehiclesApi
 * @extends {BaseAPI}
 */
export class VehiclesApi extends BaseAPI {
    /**
     * 
     * @summary Returns a list of all vehicles.
     * @param {string} xApiKey The API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesGet(xApiKey: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesGet(xApiKey, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a new vehicle.
     * @param {CreateVehicleRequest} body Options for a request.
     * @param {string} xApiKey The API key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesPost(body: CreateVehicleRequest, xApiKey: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesPost(body, xApiKey, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of bookings of a vehicle, with optional filters.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {string} [from] The filter for start date (UTC).
     * @param {string} [status] The filter for the status.
     * @param {string} [until] The filter for end date (UTC).
     * @param {string} [vehicle] The filter for the ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdBookingsGet(xApiKey: string, vehicleId: string, from?: string, status?: string, until?: string, vehicle?: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdBookingsGet(xApiKey, vehicleId, from, status, until, vehicle, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a new booking for a vehicle.
     * @param {CreateVehicleBookingRequest} body Options for a request.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdBookingsPost(body: CreateVehicleBookingRequest, xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdBookingsPost(body, xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Resets the complete vehicle.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdDelete(xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdDelete(xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Removes the complete queue of events.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdEventsDelete(xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdEventsDelete(xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets a list of unhandled events and marks them as handled.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {string} [filter] Regex filter for event name (case insensitive).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdEventsGet(xApiKey: string, vehicleId: string, filter?: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdEventsGet(xApiKey, vehicleId, filter, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the information of the vehicle.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdGet(xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdGet(xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Resets the infotainment screen.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdInfotainmentDelete(xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdInfotainmentDelete(xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the current infotainment screen.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {number} [cache] Use cache or not.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdInfotainmentGet(xApiKey: string, vehicleId: string, cache?: number, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdInfotainmentGet(xApiKey, vehicleId, cache, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Sets the data of the screen as image or video.
     * @param {string} xApiKey The API key.
     * @param {string} image The image to write / insert.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdInfotainmentPost(xApiKey: string, image: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdInfotainmentPost(xApiKey, image, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Writes an image to the infotainment screen.
     * @param {string} image The image to write / insert.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {number} [x] The x coorinate where to place the image.
     * @param {number} [y] The y coorinate where to place the image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdInfotainmentPut(image: string, xApiKey: string, vehicleId: string, x?: number, y?: number, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdInfotainmentPut(image, xApiKey, vehicleId, x, y, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Writes text to the infotainment system.
     * @param {string} text The text to write / insert.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {number} [black] Indicates if to use black font color or not.
     * @param {number} [size] The font size.
     * @param {number} [x] The x coorinate where to place the text.
     * @param {number} [y] The y coorinate where to place the text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdInfotainmentTextPut(text: string, xApiKey: string, vehicleId: string, black?: number, size?: number, x?: number, y?: number, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdInfotainmentTextPut(text, xApiKey, vehicleId, black, size, x, y, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes all vehicle signal logs.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdLogsSignalsDelete(xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdLogsSignalsDelete(xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets vehicle signal logs.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {number} [limit] The maximum number of results.
     * @param {number} [offset] The zero based offset.
     * @param {'asc' | 'desc'} [sort] Sort order.
     * @param {string} [filter] Regex filter for signal name (case insensitive).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdLogsSignalsGet(xApiKey: string, vehicleId: string, limit?: number, offset?: number, sort?: 'asc' | 'desc', filter?: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdLogsSignalsGet(xApiKey, vehicleId, limit, offset, sort, filter, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a vehicle.
     * @param {UpdateVehicleRequest} updateVehicleOptions The data to update.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdPatch(updateVehicleOptions: UpdateVehicleRequest, xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdPatch(updateVehicleOptions, xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Resets all signals.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdSignalsDelete(xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdSignalsDelete(xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets a list of all signals.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {number} [cache] Use cache or not.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdSignalsGet(xApiKey: string, vehicleId: string, cache?: number, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdSignalsGet(xApiKey, vehicleId, cache, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a list of one or more vehicle signals.
     * @param {VehicleSignalListForPatchExample} listOfVehicleSignalsToUpdate A list of one or more value signals to update.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdSignalsPatch(listOfVehicleSignalsToUpdate: VehicleSignalListForPatchExample, xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdSignalsPatch(listOfVehicleSignalsToUpdate, xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Unsets the state value for the vehicle.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdStateDelete(xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdStateDelete(xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets the state value of the vehicle.
     * @param {string} xApiKey The API key.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdStateGet(xApiKey: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdStateGet(xApiKey, vehicleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Sets a state value for the vehicle.
     * @param {string} xApiKey The API key.
     * @param {string} newVehicleStateValue The new value.
     * @param {string} vehicleId The ID of the vehicle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public apiV2VehiclesVehicleIdStatePatch(xApiKey: string, newVehicleStateValue: string, vehicleId: string, options?: any) {
        return VehiclesApiFp(this.configuration).apiV2VehiclesVehicleIdStatePatch(xApiKey, newVehicleStateValue, vehicleId, options)(this.fetch, this.basePath);
    }

}

